http://www.tangowithdjango.com/book17/

using 'pyenv' to manage python versions, using 2.7.9 for this tut
change with:
[
	$ pyenv versions
	* system
	  2.7.9

	$ pyenv global 2.7.9
]

remember when you go production: pip install pillow
* 3.2.7 of tut has a great thing about sharing a package list


Set this up later: https://realpython.com/blog/python/setting-up-sublime-text-3-for-full-stack-python-development/

goals:

- user can add a show and a group of people they are watching with
- user can see shows they are watching and their progress




at some point, postgresql may make more sense than sqlite but for now sqlite will do just fine

NOTE: Whenever you add to existing models, you will have to repeat this process running python manage.py makemigrations <app_name>, and then python manage.py migrate

NOTE: to customize the admin interface, check out https://docs.djangoproject.com/en/1.7/ref/contrib/admin/
Also see https://docs.djangoproject.com/en/1.7/intro/tutorial02/

NOTE: Look at section (6.7. Creating a Population Script) for instructions to generate test data programatically

got to "7.3.3. Category Page Workflow

With our URLs design chosen, let’s get started. We’ll undertake the following steps."
on page http://www.tangowithdjango.com/book17/chapters/models_templates.html

NOTE: if you want to change a field from a primitive to a ManyToMany, you must first remove the field, makemigrations, and then migrate. After that, add the ManyToMany, makemigrations, and migrate.

NOTE: TO INSTALL PILLOW:
	sudo apt-get install python-dev
	sudo apt-get install libjpeg8-dev
	sudo ln -s /usr/lib/x86_64-linux-gnu/libjpeg.so /usr/lib

	pip install pillow

NOTE: Be sure to change the password hashing mechanism to bcrypt or something more secure than the default

NOTE: There is more information about how to authenticate user emails and things of that sort at 9.8. Exercises on http://www.tangowithdjango.com/book17/chapters/login.html

NOTE: You can further abstract template blocks, details here: https://docs.djangoproject.com/en/1.7/topics/templates/#id1


ISSUE: A show can be added that already exists, which causes problems if you try to view that show

At some point, change login and register to use forms from forms.py rather than an inline form

At some point, provide users with password change functionality (http://www.tangowithdjango.com/book17/chapters/login_redux.html)

Fixed issue with show view not loading if more than one instance exists in the database, working on ensuring that duplicate shows cannot be added. Go to [data = form.cleaned_data
			#show = Show.objects.get(slugify(data['title']))
			# if show != null, then don't save the form!]

			on the views.py to continue the work on that

-----------------------------------------------------------------------------------------------------------------------------------------
TODO LIST:

- Register looks bad and doesn't require two passwords to match
- About screen needs work
- Shows should pull in info from tvdb
	- show data should be pulled from tvdb when they are added and store some of it in the db
- 

-----------------------------------------------------------------------------------------------------------------------------------------





got to http://www.tangowithdjango.com/book17/chapters/template_tags.html



------------------------------------------------------------------------------------------------
8-8-17
Doing some playing around on testboard.py, looking to get the tvdb data in when adding a show
then, get the search to prepopulate with results from tvdb api
NOTE: TheTVDB api has changed over to a JSON restful api, so switch over to this. The old API will no longer function starting in october [https://api.thetvdb.com/swagger]

2-4-18

first things first I want to bring in the episodes when I draw in the tv data... and I don't want the user to create eposides when they are looking at the show itself

instead of just being 'add a show', the user should search for shows and then from the show's page do 'add to watching' or something like that... when a show is picked from the list of shows brought back is when you should populate all of the information about the show.


should be able to use https://github.com/phate89/tvdbsimple
api key is in /etc/tvdbapikey.txt

https://github.com/phate89/tvdbsimple/wiki
https://github.com/phate89/tvdbsimple/blob/master/EXAMPLES.rst


on the api page (https://api.thetvdb.com/swagger#/Episodes), you can select 'expand operations' to see what data is available for the specific data type
